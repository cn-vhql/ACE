"""
ACE Framework Data Models
"""
from typing import List, Dict, Any, Optional, Union
from pydantic import BaseModel, Field
from enum import Enum
import uuid
from datetime import datetime


class BulletType(str, Enum):
    """Types of bullet points in the playbook"""
    STRATEGY = "strategy"
    INSIGHT = "insight"
    ERROR_PATTERN = "error_pattern"
    API_GUIDELINE = "api_guideline"
    VERIFICATION_CHECK = "verification_check"
    FORMULA = "formula"
    DOMAIN_KNOWLEDGE = "domain_knowledge"


class BulletTag(str, Enum):
    """Tags for bullet points"""
    HELPFUL = "helpful"
    HARMFUL = "harmful"
    NEUTRAL = "neutral"


class Bullet(BaseModel):
    """A single bullet point in the playbook"""
    id: str = Field(default_factory=lambda: str(uuid.uuid4()))
    content: str
    bullet_type: BulletType
    section: str
    helpful_count: int = 0
    harmful_count: int = 0
    created_at: datetime = Field(default_factory=datetime.now)
    updated_at: datetime = Field(default_factory=datetime.now)
    metadata: Dict[str, Any] = Field(default_factory=dict)
    
    def tag(self) -> BulletTag:
        """Determine the tag based on counts"""
        if self.helpful_count > self.harmful_count:
            return BulletTag.HELPFUL
        elif self.harmful_count > self.helpful_count:
            return BulletTag.HARMFUL
        return BulletTag.NEUTRAL


class Playbook(BaseModel):
    """The evolving playbook containing accumulated strategies and insights"""
    bullets: List[Bullet] = Field(default_factory=list)
    sections: Dict[str, List[str]] = Field(default_factory=dict)
    metadata: Dict[str, Any] = Field(default_factory=dict)
    created_at: datetime = Field(default_factory=datetime.now)
    updated_at: datetime = Field(default_factory=datetime.now)
    
    def add_bullet(self, bullet: Bullet) -> None:
        """Add a new bullet to the playbook"""
        self.bullets.append(bullet)
        if bullet.section not in self.sections:
            self.sections[bullet.section] = []
        self.sections[bullet.section].append(bullet.id)
        self.updated_at = datetime.now()
    
    def get_bullets_by_section(self, section: str) -> List[Bullet]:
        """Get all bullets in a specific section"""
        section_bullet_ids = self.sections.get(section, [])
        return [b for b in self.bullets if b.id in section_bullet_ids]
    
    def get_relevant_bullets(self, query: str, max_bullets: int = 10) -> List[Bullet]:
        """Get bullets relevant to a query (simple keyword matching for now)"""
        query_lower = query.lower()
        relevant_bullets = []
        
        for bullet in self.bullets:
            if any(word in bullet.content.lower() for word in query_lower.split() if len(word) > 2):
                relevant_bullets.append(bullet)
        
        # Sort by helpfulness and recency
        relevant_bullets.sort(key=lambda b: (b.helpful_count - b.harmful_count, b.updated_at), reverse=True)
        return relevant_bullets[:max_bullets]


class Trajectory(BaseModel):
    """A reasoning trajectory generated by the Generator"""
    id: str = Field(default_factory=lambda: str(uuid.uuid4()))
    query: str
    reasoning_steps: List[str]
    generated_code: Optional[str] = None
    execution_result: Optional[str] = None
    success: bool = False
    error_message: Optional[str] = None
    used_bullet_ids: List[str] = Field(default_factory=list)
    metadata: Dict[str, Any] = Field(default_factory=dict)
    created_at: datetime = Field(default_factory=datetime.now)


class Reflection(BaseModel):
    """A reflection generated by the Reflector"""
    id: str = Field(default_factory=lambda: str(uuid.uuid4()))
    trajectory_id: str
    reasoning: str
    error_identification: Optional[str] = None
    root_cause_analysis: Optional[str] = None
    correct_approach: Optional[str] = None
    key_insight: Optional[str] = None
    bullet_tags: Dict[str, BulletTag] = Field(default_factory=dict)
    created_at: datetime = Field(default_factory=datetime.now)


class DeltaUpdate(BaseModel):
    """A delta update to be applied to the playbook"""
    id: str = Field(default_factory=lambda: str(uuid.uuid4()))
    operations: List[Dict[str, Any]]
    reasoning: str
    created_at: datetime = Field(default_factory=datetime.now)


class ACEConfig(BaseModel):
    """Configuration for the ACE framework"""
    # Model configurations
    generator_model: str = "gpt-4"
    reflector_model: str = "gpt-4"
    curator_model: str = "gpt-4"
    
    # API configurations
    openai_api_key: Optional[str] = None
    anthropic_api_key: Optional[str] = None
    
    # ACE parameters
    max_reflector_rounds: int = 3
    max_epochs: int = 5
    max_playbook_bullets: int = 1000
    similarity_threshold: float = 0.8
    
    # Retrieval parameters
    max_retrieved_bullets: int = 10
    min_bullet_helpfulness: int = 0
    
    model_config = {"extra": "allow"}
